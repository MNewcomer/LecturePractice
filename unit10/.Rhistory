P<-t(U)%*%U
View(P)
View(U)
View(P)
n<-5
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
system.time(U <- chol(X)) #produ
system.time(b3<-backsolve(U, backsolve(U, Y, transpose = TRUE)))
U <- chol(crossprod(X)) # U is upper-triangular
out1 <- backsolve(U, b)
U <- chol(crossprod(X)) # U is upper-triangular
out1 <- backsolve(U, Y)
fix(out1)
fix(`b3`)
fix(out1)
n<-5
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
system.time(U <- chol(X)) #prod
P<-t(U)*U
system.time(b3<-backsolve(U, backsolve(U, Y, transpose = TRUE)))
system.time(b4<-backsolve(P,Y, transpose = TRUE))
fix(`b4`)
fix(`b3`)
View(U)
n<-5
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
system.time(U <- chol(X)) #produces U which is upper triangular
P<-crossprod(U)
system.time(b3<-backsolve(U, backsolve(U, Y, transpose = TRUE)))
system.time(b4<-backsolve(P,Y, transpose = TRUE))
fix(`b4`)
fix(`b3`)
View(U)
U <- chol(crossprod(X)) # U is upper-triangular
View(U)
View(P)
t(U)
n<-5
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
system.time(U <- chol(X)) #produces U which is upper triangular
t(U)
U
t(U)%*%U
t(U)*U
crossprod(U)
P<-crossprod(U)
View(P)
system.time(b5<-backsolve(P,Y))
fix(`b5`)
system.time(b5<-backsolve(P,Y,transpose=TRUE))
fix(`b5`)
system.time(b3<-backsolve(U, backsolve(U, Y, transpose = TRUE)))
fix(`b3`)
system.time(b4<-backsolve(P,Y))
fix(`b4`)
fix(`b5`)
fix(`b3`)
View(P)
View(U)
Q<-t(U)*U
View(Q)
system.time(b6<-backsolve(Q,Y))
fix(`b6`)
fix(`b3`)
n<-5
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
system.time(U <- chol(X)) #produces U which is upper triangular
X
U%*%t(U)
B=matrix(1,2,1,2,8,10,1,10,18,nr=3)
B=matrix(c(1,2,1,2,8,10,1,10,18),nr=3)
View(B)
t(B)
View(X)
B==t(B)
A=chol(B)
View(A)
L
A%*%t(A)
A
t(A)
A %*% t(A)
B==(A %*% t(A))
chol(B)
L
A %*% t(A)
B
t(A) %*% A
B
n<-5
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
system.time(U <- chol(X)) #produces U which is upper triangular
Q<-t(U) %*% U
system.time(b3<-backsolve(U, backsolve(U, Y, transpose = TRUE)))
system.time(b6<-backsolve(Q,Y))
fix(`b3`)
fix(`b6`)
View(Q)
View(X)
system.time(b7<-backsolve(Q,Y, transpose=TRUE))
fix(`b7`)
system.time(b8<-solve(Q,Y))
fix(`b8`)
system.time(b1<-backsolve(U, backsolve(U, Y, transpose = TRUE)))
system.time(b2<-solve(Q,Y))
b1==b2
fix(`b1`)
fix(`b2`)
fix(`b1`)
options(digits=5)
system.time(b1<-backsolve(U, backsolve(U, Y, transpose = TRUE)))
system.time(b2<-solve(Q,Y))
b1==b2
fix(`b2`)
fix(`b1`)
fix(`b2`)
options(digits=3)
options(digits=3)
n<-5
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
system.time(U <- chol(X)) #produces U which is upper triangular
Q<-t(U) %*% U
system.time(b1<-backsolve(U, backsolve(U, Y, transpose = TRUE)))
system.time(b2<-solve(Q,Y))
b1==b2
fix(`b1`)
b1
b2
E<-eigen(X)
E$vectors
E$values
sqrt(16)
options(digits=3)
n<-5
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
E<-eigen(X)
S<-E$vectors
L<-E$values
P<-S %*% sqrt(L)
C<- t(X) %*% t(P) %*% P %*% X
C<- t(X) %*% (t(P) %*% (P %*% X))
View(P)
P %*% X
t(P)%*%P
View(X)
t(P)%*%X
P%*%t(P)%*%X
t(X)P%*%t(P)%*%X
t(X)%*%P%*%t(P)%*%X
C<- t(X)%*%P%*%t(P)%*%X
D<- t(X)%*%P%*%t(P)%*%Y
system.time(b3<-solve(C,D))
View(C)
View(D)
View(X)
View(P)
P%*%t(P)
X
fix(L)
E$value[1]
E$value[1]*E$vector[,1]
X%*%E$vector[,1]
X%*%E$vector
E$value*E$vector
E$value%*%E$vector
E$value
E$vector
t(E$value)*E$vector
E$value*E$vector
L
matrix(L)
L<-matrix(E$values)
View(L)
L*E$vector
t(L)*E$vector
S
t(L)*S
t(L)%*%S
L%*%S
S%*%L
L*S
L
S
t(L)
t(L)*S
S*L
S*t(L)
S%*%L
S %*% t(L)
L %*% S
View(L)
t(L) %*% S
t(L) * S
S*E$values
S
e$values
E$values
E$values[1]*S[,1]
L<-matrix(E$values,rep=5)
L<-matrix(rep(E$values,5),nr=5)
View(L)
S%*%L
S
L
S*L
S*t(L)
X*E$vector[,1]
X%*%E$vector[,1]
X%*%S[,]
X%*%S
S%*%t(L)
S*t(L)
View(X)
S*t(L)*t(S)
X
S*t(L)%*%t(S)
X
a<-X%*%S
b<-S*t(L)
a==b
a
b
x
X
(b)*(S)
(b)*(t(S))
X
(b)%*%(t(S))
(S*t(L))%*%(t(S))
(S*sqrt(t(L)))%*%(sqrt(t(L))*t(S))
(S*sqrt(t(L)))%*%(sqrt((L))*t(S))
P<-S*sqrt(t(L))
P*t(P)
P%*%t(P)
C<- t(X)%*%P%*%t(P)%*%X
D<- t(X)%*%P%*%t(P)%*%Y
system.time(b3<-solve(C,D))
View(`b3`)
options(digits=3)
n<-50
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
system.time(U <- chol(X)) #produces U which is upper triangular
Q<-t(U) %*% U
system.time(b1<-backsolve(U, backsolve(U, Y, transpose = TRUE)))
system.time(b2<-solve(Q,Y))
b1[1:5]
b2[1:5]
options(digits=3)
n<-50
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
E<-eigen(X)
S<-E$vectors
L<-matrix(rep(E$values,n),nr=n)
(S*sqrt(t(L)))%*%(sqrt((L))*t(S))
P<-S*sqrt(t(L))
C<- t(X)%*%P%*%t(P)%*%X
D<- t(X)%*%P%*%t(P)%*%Y
system.time(b3<-solve(C,D))
options(digits=3)
n<-5
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
E<-eigen(X)
S<-E$vectors
L<-matrix(rep(E$values,n),nr=n)
View(L)
(S*sqrt(t(L)))%*%(sqrt((L))*t(S))
X
P<-S*sqrt(t(L))
C<- t(X)%*%P%*%t(P)%*%X
D<- t(X)%*%P%*%t(P)%*%Y
system.time(b3<-solve(C,D))
View(`b3`)
options(digits=3)
n<-5
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
system.time(U <- chol(X)) #produces U which is upper triangular
Q<-t(U) %*% U
system.time(b1<-backsolve(U, backsolve(U, Y, transpose = TRUE)))
system.time(b2<-solve(Q,Y))
b1[1:5]
b2[1:5]
E<-eigen(X)
S<-E$vectors
L<-matrix(rep(E$values,n),nr=n)
(S*sqrt(t(L)))%*%(sqrt((L))*t(S))
P<-S*sqrt(t(L))
C<- t(X)%*%P%*%t(P)%*%X
D<- t(X)%*%P%*%t(P)%*%Y
system.time(b3<-solve(C,D))
b3[1:5]
options(digits=3)
n<-10
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
system.time(U <- chol(X)) #produces U which is upper triangular
Q<-t(U) %*% U
system.time(b1<-backsolve(U, backsolve(U, Y, transpose = TRUE)))
system.time(b2<-solve(Q,Y))
b1[1:5]
b2[1:5]
#solved using eigendecomposition
E<-eigen(X)
S<-E$vectors
L<-matrix(rep(E$values,n),nr=n)
(S*sqrt(t(L)))%*%(sqrt((L))*t(S))
P<-S*sqrt(t(L))
C<- t(X)%*%P%*%t(P)%*%X
D<- t(X)%*%P%*%t(P)%*%Y
system.time(b3<-solve(C,D))
b3[1:5]
options(digits=3)
n<-100
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
system.time(U <- chol(X)) #produces U which is upper triangular
Q<-t(U) %*% U
system.time(b1<-backsolve(U, backsolve(U, Y, transpose = TRUE)))
system.time(b2<-solve(Q,Y))
b1[1:5]
b2[1:5]
#solved using eigendecomposition
E<-eigen(X)
S<-E$vectors
L<-matrix(rep(E$values,n),nr=n)
(S*sqrt(t(L)))%*%(sqrt((L))*t(S))
P<-S*sqrt(t(L))
C<- t(X)%*%P%*%t(P)%*%X
D<- t(X)%*%P%*%t(P)%*%Y
system.time(b3<-solve(C,D))
b3[1:5]
b1[1:5]
b2[1:5]
options(digits=3)
n<-1000
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
system.time(U <- chol(X)) #produces U which is upper triangular
Q<-t(U) %*% U
system.time(b1<-backsolve(U, backsolve(U, Y, transpose = TRUE)))
system.time(b2<-solve(Q,Y))
b1[1:5]
b2[1:5]
#solved using eigendecomposition
E<-eigen(X)
S<-E$vectors
L<-matrix(rep(E$values,n),nr=n)
#(S*sqrt(t(L)))%*%(sqrt((L))*t(S))
P<-S*sqrt(t(L))
C<- t(X)%*%P%*%t(P)%*%X
D<- t(X)%*%P%*%t(P)%*%Y
system.time(b3<-solve(C,D))
b3[1:5]
options(digits=3)
n<-100
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
system.time(U <- chol(X)) #produces U which is upper triangular
Q<-t(U) %*% U
system.time(b1<-backsolve(U, backsolve(U, Y, transpose = TRUE)))
system.time(b2<-solve(Q,Y))
b1[1:5]
b2[1:5]
#solved using eigendecomposition
E<-eigen(X)
S<-E$vectors
L<-matrix(rep(E$values,n),nr=n)
#(S*sqrt(t(L)))%*%(sqrt((L))*t(S))
P<-S*sqrt(t(L))
C<- t(X)%*%P%*%t(P)%*%X
D<- t(X)%*%P%*%t(P)%*%Y
system.time(b3<-solve(C,D))
b3[1:5]
options(digits=3)
cholDecomp<-function(n) {
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
U <- chol(X) #produces U which is upper triangular
Q<-t(U) %*% U
b1<-backsolve(U, backsolve(U, Y, transpose = TRUE))
b2<-solve(Q,Y)
}
n=100
cholDecomp(n)
b1[1:5]
options(digits=3)
cholDecomp<-function(n) {
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
U <- chol(X) #produces U which is upper triangular
Q<-t(U) %*% U
b1<-backsolve(U, backsolve(U, Y, transpose = TRUE))
b2<-solve(Q,Y)
return(b1)
}
n=100
cholDecomp(n)
b1[1:5]
b1<-cholDecomp(n)
b1[1:5]
eigDecomp<-function(n){
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
Y <- c(rnorm(n))
E<-eigen(X)
S<-E$vectors
L<-matrix(rep(E$values,n),nr=n)
#(S*sqrt(t(L)))%*%(sqrt((L))*t(S))
P<-S*sqrt(t(L))
C<- t(X)%*%P%*%t(P)%*%X
D<- t(X)%*%P%*%t(P)%*%Y
b3<-solve(C,D)
return(b3)
}
b3<-eigDecomp(n)
b3[1:5]
2120*8/1e6
100^3*10+100^2+100*10
(100^3*10+100^2+100*10)*8/1e6
(100*10*2+100*100*10*10)
(100*10*2+100*100*10*10)*8/1e6
((2*160^2)/4+160^4/(16^2))*8/1e6
2*160^2/4
setwd("D:/Users/Michelle Newcomer/Documents/GitHub/Stat243PSets/PS4")
require(knitr)
require(markdown)
filen <- "Newcomer_PS4"
knit(paste0(filen,".Rmd"))
system(paste0("pandoc -s ", paste0(filen,".md"), " -t latex -V geometry:margin=1in -o ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
knit(paste0(filen,".Rmd"))
system(paste0("pandoc -s ", paste0(filen,".md"), " -t latex -V geometry:margin=1in -o ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
D:/Users/Michelle Newcomer/Documents/Berkeley/Wohler Project/Min3P/bin/min3p_def.exe
system(D:/Users/Michelle Newcomer/Documents/Berkeley/Wohler Project/Min3P/bin/min3p_def.exe)
system("D:/Users/Michelle Newcomer/Documents/Berkeley/Wohler Project/Min3P/bin/min3p_def.exe")
system("D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\bin\\min3p_def.exe")
system("D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\bin\\min3p_def.exe" "D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\runs\\1a\\Russian1D.dat" /S)
system("D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\bin\\min3p_def.exe" "D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\runs\\1a\\Russian1D.dat")
system("D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\bin\\min3p_def.exe D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\runs\\1a\\Russian1D.dat")
system("D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\bin\\min3p_def.exe D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\runs\\1a\\Russian1D.dat" /S /E)
system("D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\bin\\min3p_def.exe D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\runs\\1a\\Russian1D.dat /S /E")
system(D:)
system(D: cd "D:\Users\Michelle Newcomer\Documents\Berkeley\Wohler Project\Min3P\runs")
system(cd "D:\Users\Michelle Newcomer\Documents\Berkeley\Wohler Project\Min3P\runs")
system("D:\Users\Michelle Newcomer\Documents\Berkeley\Wohler Project\Min3P\runs")
system("D:\\Users\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\runs")
system("D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\runs")
run_exe("D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\bin\\min3p_def.exe")
system("D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\bin\\min3p_def.exe D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\runs\\t1\\Russ2D")
system("D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\bin\\min3p_def.exe D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\runs\\t1\\Russ2D")
system("D:\\Users\\Michelle Newcomer\\Documents\\Berkeley\\Wohler Project\\Min3P\\bin\\min3p_def.exe")
n<-5000
set.seed(1)
X <- crossprod(matrix(rnorm(n^2), nr=n)) #This does t(X)*X producing a p.d. matrix
set.seed(2)
y <- c(rnorm(n))
kappa(X, exact = TRUE)
require(knitr)
require(markdown)
filen <- "Newcomer_PS4"
knit(paste0(filen,".Rmd"))
setwd("D:/Users/Michelle Newcomer/Documents/GitHub/Stat243PSets/PS4")
filen <- "Newcomer_PS4"
knit(paste0(filen,".Rmd"))
system(paste0("pandoc -s ", paste0(filen,".md"), " -t latex -V geometry:margin=1in -o ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
