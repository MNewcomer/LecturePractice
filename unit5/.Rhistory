mat <- matrix(1:4, 2, 2)[1, ]
fix(mat)
dim(mat); print(mat)
colSums(mat)
mat <- matrix(1:4, 2, 2)
View(mat)
mat <- matrix(1:4, 2, 2)[1, , drop = FALSE]
View(mat)
options(width = 55)
library(codetools)
findGlobals(lm)[1:25]
f <- function() {y <- 3; print(x + y)}
f(3)
f
f()
f(x)
f(3,2)
findGlobals(f)
options()$warn
x = 1:3
fix(x)
for(i in 1:100){
if(x > 2) print("hi")
}
warnings()
options(warn = 1)
for(i in 1:100){
if(x > 2) print("hi")
}
options(warn = 2)
for(i in 1:100){
if(x > 2) print("hi")
}
i
debug(lm)
n <- nrow(mtcars)
lm(mpg ~ disp, data = mtcars)
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
q
Q
ls()
print(n)  # typing 'n' won't work!
undebug(lm)
library(MASS)
gamma.est <- function(data) {
# this fits a gamma distribution to a collection of numbers
m <- mean(data)
v <- var(data)
s <- v/m
a <- m/s
return(list(a=a,s=s))
}
calcVar = function(estimates){
var.of.ests <- apply(estimates, 2, var)
return(((n-1)^2/n)*var.of.ests)
}
gamma.jackknife.2 <- function(data) {
# jackknife the estimation
n <- length(data)
jack.estimates = gamma.est(data[-1])
for (omitted.point in 2:n) {
jack.estimates = rbind(jack.estimates, gamma.est(data[-omitted.point]))
}
jack.var = calcVar(jack.estimates)
return(sqrt(jack.var))
}
cats$Hwt
plot(cats$Hwt)
gamma.jackknife.2(cats$Hwt) # jackknife gamma dist. estimates of cat heart weights
library(MASS)
gamma.est <- function(data) {
# this fits a gamma distribution to a collection of numbers
m <- mean(data)
v <- var(data)
s <- v/m
a <- m/s
return(list(a=a,s=s))
}
calcVar = function(estimates){
var.of.ests <- apply(estimates, 2, var)
return(((n-1)^2/n)*var.of.ests)
}
gamma.jackknife.2 <- function(data) {
# jackknife the estimation
n <- length(data)
jack.estimates = gamma.est(data[-1])
for (omitted.point in 2:n) {
jack.estimates = rbind(jack.estimates, gamma.est(data[-omitted.point]))
}
jack.var = calcVar(jack.estimates)
return(sqrt(jack.var))
}
gamma.jackknife.2(cats$Hwt) # jackknife gamma dist. estimates of cat heart weights
traceback()
options(error = recover)
gamma.jackknife.2(cats$Hwt)
n
estimates
apply(estimates, 2, var) # ok, so the error does occur here
var(estimates[ ,1])  # can we use var() a single time?
estimates[ ,1]
class(estimates)
options(error = NULL) # reset things
trace(calcVar, edit = 'emacs')
browser()
trace(calcVar, edit = 'emacs')
fix(calcVar, editor = 'emacs')
calcVar
gamma.jackknife.2(cats$Hwt)
n
n
out <- quote(y <- 3)
out[[3]] <- 4
x <- 3
stopifnot(is(x, "matrix"))
mysqrt <- function(x) {
if (is.list(x)) {
warning("x is a list; converting to a vector")
x <- unlist(x)
}
if (!is.numeric(x)) {
stop("What is the square root of 'bob'?")
} else {
if (any(x < 0)) {
warning("mysqrt: found negative values; proceeding anyway")
x[x >= 0] <- (x[x >= 0])^(1/2)
x[x < 0] <- NaN
return(x)
} else return(x^(1/2))
}
}
mysqrt(c(1, 2, 3))
mysqrt(c(5, -7))
mysqrt(c("asdf", "sdf"))
mysqrt(list(5, 3, "ab"))
library(ismev)
install.packages("ismev")
library(methods)
n <- 100; nDays <- 365
x <- matrix(rnorm(nDays * n), nr = nDays)
View(x)
x <- apply(x, 2, max)
fix(x)
x <- cbind(rep(0, 100), x)
View(x)
params <- matrix(NA, nr = ncol(x), nc = 3)
View(params)
for(i in 1:ncol(x)){
fit <- try(gev.fit(x[ ,i], show = FALSE))
if(!is(fit, "try-error"))
params[i, ] = fit$mle
}
library(methods)
library(ismev)
params <- matrix(NA, nr = ncol(x), nc = 3)
for(i in 1:ncol(x)){
fit <- try(gev.fit(x[ ,i], show = FALSE))
if(!is(fit, "try-error"))
params[i, ] = fit$mle
}
params
