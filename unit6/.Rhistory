print(format(objSizes, justify = "right", width = 11), quote = FALSE)
}
a <- rnorm(5)
.Internal(inspect(a))
fix(a)
gc()
x <- rnorm(1e7)
gc()
dim(x) <- c(1e4, 1e3)
diag(x) <- 1
gc()
x <- rnorm(1e7)
.Internal(inspect(x))
x[5] <- 7
.Internal(inspect(x))
gc()
x <- rnorm(1e7)
gc()
y <- x[1:(length(x) - 1)]
gc()
gc()
as.integer(useline), as.integer(length(xvar)))
res <- .C("fastcount", PACKAGE="GCcorrect", tablex = as.integer(tablex), tabley = as.integer(tabley), as.integer(xvar), as.integer(yvar), as.integer(useline), as.integer(length(xvar)))
f <- function(x){
print(.Internal(inspect(x)))
return(mean(x))
}
x <- rnorm(1e7)
class(x)
debug(f)
f(x)
f(as.numeric(x))
f(as.integer(x))
library(inline)
install.packages("inline")
library(inline)
src <- '
for (int i = 0; i < *n; i++) {
x[i] = exp(x[i]);
}
'
sillyExp <- cfunction(signature(n = "integer", x = "numeric"),
src, convention = ".C")
len <- as.integer(100)  # or 100L
vals <- rnorm(len)
vals[1]
out1 <- sillyExp(n = len, x = vals)
f <- function(x){
print(.Internal(inspect(x)))
return(mean(x))
}
o
x
p
n
m
0
a
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
q
res <- .C("fastcount", PACKAGE="GCcorrect", tablex = as.integer(tablex), tabley = as.integer(tabley), as.integer(xvar), as.integer(yvar), as.integer(useline), as.integer(length(xvar)))
f <- function(x){
print(.Internal(inspect(x)))
return(mean(x))
}
x <- rnorm(1e7)
class(x)
f(x)
f(as.numeric(x))
f(as.integer(x))
library(inline)
src <- '
for (int i = 0; i < *n; i++) {
x[i] = exp(x[i]);
}
'
src, convention = ".C")
sillyExp <- cfunction(signature(n = "integer", x = "numeric"), src, convention = ".C")
sillyExp <- cfunction(signature(n = "integer", x = "numeric"), src, convention = ".C")
ToothGrowth
class(ToothGrowth)
class(ToothGrowth)
summary(ToothGrowth)
summary.data.frame(ToothGrowth)
fit <- lm(len ~ dose + factor(supp), data=ToothGrowth)
class(fit)
summary(fit)
as.integer(useline), as.integer(length(xvar)))
res <- dummy(tablex = as.integer(tablex), tabley = as.integer(tabley), as.integer(xvar), as.integer(yvar), as.integer(useline), as.integer(length(xvar)))
res <- .C(tablex = as.integer(tablex), tabley = as.integer(tabley), as.integer(xvar), as.integer(yvar), as.integer(useline), as.integer(length(xvar)))
res <- .C("fastcount", PACKAGE="GCcorrect", tablex = as.integer(tablex), tabley = as.integer(tabley), as.integer(xvar), as.integer(yvar), as.integer(useline), as.integer(length(xvar)))
n=10
sample(c(seq(1, 20, by = 1), NA), n, replace = TRUE)
yvar <- sample(c(seq(1, 20, by = 1), NA), n, replace = TRUE)
xvar <- sample(c(seq(1, 20, by = 1), NA), n, replace = TRUE)
fix(xvar)
fix(yvar)
tablex <- numeric(max(xvar) + 1)
nalineX <- is.na(xvar)
nalineY <- is.na(yvar)
xvar[nalineX | nalineY] <- 0
yvar[nalineX | nalineY] <- 0
useline <- !(nalineX | nalineY)
tablex <- numeric(max(xvar) + 1)
fix(tablex)
tabley <- numeric(max(xvar) + 1)
fix(tabley)
fix(xvar)
fix(yvar)
n=10
xvar <- sample(c(seq(1, 20, by = 1), NA), n, replace = TRUE)
yvar <- sample(c(seq(1, 20, by = 1), NA), n, replace = TRUE)
nalineX <- is.na(xvar)
nalineY <- is.na(yvar)
xvar[nalineX | nalineY] <- 0
yvar[nalineX | nalineY] <- 0
useline <- !(nalineX | nalineY)
# Table must be initialized for -1's
tablex <- numeric(max(xvar) + 1)
tabley <- numeric(max(xvar) + 1)
fix(tablex)
n=10
xvar <- sample(c(seq(1, 20, by = 1), NA), n, replace = TRUE)
yvar <- sample(c(seq(1, 20, by = 1), NA), n, replace = TRUE)
nalineX <- is.na(xvar)
nalineY <- is.na(yvar)
fix(nalineX)
xvar[nalineX | nalineY] <- 0
yvar[nalineX | nalineY] <- 0
fix(xvar)
n=10
xvar <- sample(c(seq(1, 20, by = 1), NA), n, replace = TRUE)
yvar <- sample(c(seq(1, 20, by = 1), NA), n, replace = TRUE)
nalineX <- is.na(xvar)
nalineY <- is.na(yvar)
fix(xvar)
xvar[nalineX | nalineY] <- 0
yvar[nalineX | nalineY] <- 0
fix(xvar)
tablex <- numeric(max(xvar) + 1)
tabley <- numeric(max(xvar) + 1)
fix(tablex)
res <- .C("fastcount", PACKAGE="GCcorrect", tablex = as.integer(tablex), tabley = as.integer(tabley), as.integer(xvar), as.integer(yvar), as.integer(useline), as.integer(length(xvar)))
res <- dummy(tablex = as.integer(tablex), tabley = as.integer(tabley), as.integer(xvar), as.integer(yvar), as.integer(useline), as.integer(length(xvar)))
res <- .C(tablex = as.integer(tablex), tabley = as.integer(tabley), as.integer(xvar), as.integer(yvar), as.integer(useline), as.integer(length(xvar)))
n=10
xvar <- sample(c(seq(1, 20, by = 1), NA), n, replace = TRUE)
yvar <- sample(c(seq(1, 20, by = 1), NA), n, replace = TRUE)
nalineX <- is.na(xvar)
nalineY <- is.na(yvar)
xvar[nalineX | nalineY] <- 0
yvar[nalineX | nalineY] <- 0
useline <- !(nalineX | nalineY)
# Table must be initialized for -1's
tablex <- numeric(max(xvar) + 1)
tabley <- numeric(max(xvar) + 1)
fix(useline)
}
}
}
tablex = as.integer(tablex), tabley = as.integer(tabley), as.integer(xvar), as.integer(yvar), as.integer(useline), as.integer(length(xvar))
}
}
}
}
gc()
f <- function(x){
print(.Internal(inspect(x)))
return(mean(x))
}
n <- 100
k <- matrix(0:n)
p <- 0.3
s <- 0.5
#problem 1 using the log transform
logpmf <- k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
View(logpmf)
n <- 100
k <- matrix(0:n-1)
p <- 0.3
s <- 0.5
logpmf <- k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
n <- 100
k <- matrix(0:n-1)
View(k)
k <- matrix(0:99)
View(k)
n <- 100
k <- matrix(0:(n-1))
p <- 0.3
s <- 0.5
logpmf <- k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
View(logpmf)
pmf <- exp(logpmf)
View(pmf)
benchmark(c_pmf1 <- apply(pmf,2,sum),c_pmf2 <- sum(pmf), replications = 10)
res <- function(x) {
tablex = as.integer(tablex), tabley = as.integer(tabley)
}
n=10
xvar <- sample(c(seq(1, 20, by = 1), NA), n, replace = TRUE)
yvar <- sample(c(seq(1, 20, by = 1), NA), n, replace = TRUE)
nalineX <- is.na(xvar)
nalineY <- is.na(yvar)
xvar[nalineX | nalineY] <- 0
yvar[nalineX | nalineY] <- 0
useline <- !(nalineX | nalineY)
# Table must be initialized for -1's
tablex <- numeric(max(xvar) + 1)
tabley <- numeric(max(xvar) + 1)
res <- function(x) {
tablex = as.integer(tablex), tabley = as.integer(tabley)
n=10
xvar <- sample(c(seq(1, 20, by = 1), NA), n, replace = TRUE)
yvar <- sample(c(seq(1, 20, by = 1), NA), n, replace = TRUE)
nalineX <- is.na(xvar)
nalineY <- is.na(yvar)
xvar[nalineX | nalineY] <- 0
yvar[nalineX | nalineY] <- 0
useline <- !(nalineX | nalineY)
# Table must be initialized for -1's
tablex <- numeric(max(xvar) + 1)
tabley <- numeric(max(xvar) + 1)
res <- function(x) {
tablex = as.integer(tablex)
tabley = as.integer(tabley)
}
f <- function(x){
print(.Internal(inspect(x)))
return(mean(x))
}
factorial(n)
n <- 100
k <- matrix(0:(n-1))
p <- 0.3
s <- 0.5
factorial(n)
lfactorial(n)
n <- 100
k <- matrix(0:n)
p <- 0.3
s <- 0.5
logpmf <- lfactorial(n)+lfactorial(k)+lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
View(logpmf)
View(k)
View(logpmf)
pmf <- exp(logpmf)
View(pmf)
n <- 100
k <- matrix(0:n)
p <- 0.3
s <- 0.5
#problem 1 using the log transform
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
View(logpmf)
pmf <- exp(logpmf)
View(pmf)
benchmark(c_pmf1 <- apply(pmf,2,sum),c_pmf2 <- sum(pmf), replications = 10)
View(pmf)
nansum(pmf)
sum(pmf)
sum(pmf, nan.rm=TRUE)
View(pmf)
sum(pmf, na.rm=TRUE)
n <- 1000
k <- matrix(0:n)
p <- 0.3
s <- 0.5
#problem 1 using the log transform
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
pmf <- exp(logpmf)
#problem 1 fast way and without log transforming
# pmf <- ((k^k)*(n-k)^(n-k)/(n^n))*(((n^n)/((k^k)*(n-k)^(n-k)))^s)*(p^(k*s))*((1-p)^((n-k)*s))
# b) look at benchmark 2 different ways when applying the sum
benchmark(c_pmf1 <- apply(pmf,2,sum),c_pmf2 <- sum(pmf), replications = 10)
n <- 10000
k <- matrix(0:n)
p <- 0.3
s <- 0.5
#problem 1 using the log transform
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
pmf <- exp(logpmf)
#problem 1 fast way and without log transforming
# pmf <- ((k^k)*(n-k)^(n-k)/(n^n))*(((n^n)/((k^k)*(n-k)^(n-k)))^s)*(p^(k*s))*((1-p)^((n-k)*s))
# b) look at benchmark 2 different ways when applying the sum
benchmark(c_pmf1 <- apply(pmf,2,sum),c_pmf2 <- sum(pmf), replications = 10)
n <- 10000
k <- matrix(0:n)
p <- 0.3
s <- 0.5
#problem 1 using the log transform
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
pmf <- exp(logpmf)
#problem 1 fast way and without log transforming
# pmf <- ((k^k)*(n-k)^(n-k)/(n^n))*(((n^n)/((k^k)*(n-k)^(n-k)))^s)*(p^(k*s))*((1-p)^((n-k)*s))
# b) look at benchmark 2 different ways when applying the sum
benchmark(c_pmf1 <- apply(pmf,2,sum),c_pmf2 <- sum(pmf, na.rm=TRUE), replications = 10)
n <- 10000
k <- matrix(0:n)
p <- 0.3
s <- 0.5
#problem 1 using the log transform
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
n <- 10
k <- matrix(0:n)
p <- 0.3
s <- 0.5
#problem 1 using the log transform
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
View(k)
View(logpmf)
s*k*log(p)
k*log(k)
s*k*log(k)
View(logpmf)
logpmf(k)
logpmf[k]
logpmf[k==0]
if (k == 0){
logpmf[k==0]<-0
}
View(logpmf)
if (k == n){
logpmf[k==n]<-0
}
View(logpmf)
View(k)
k(1)
k[1]
n <- 10
k <- matrix(0:n)
p <- 0.3
s <- 0.5
#problem 1 using the log transform
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
if (k[1] == 0){
logpmf[k==0]<-0
}
View(logpmf)
View(logpmf)
n <- 10
k <- matrix(0:n)
p <- 0.3
s <- 0.5
#problem 1 using the log transform
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
if (k[1] == 0){
logpmf[k[1]==0]<-0
}
if (k[n+1] == n){
logpmf[k[n+1]==n]<-0
}
View(logpmf)
n <- 10
k <- matrix(0:n)
p <- 0.3
s <- 0.5
#problem 1 using the log transform
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
if (k[1] == 0){
logpmf[k[1]==0]<-0
}
View(logpmf)
n <- 10
k <- matrix(0:n)
p <- 0.3
s <- 0.5
#problem 1 using the log transform
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
if (k[1] == 0){
logpmf[k==0]<-0
}
View(logpmf)
if (k[n+1] == n){
logpmf[k==n]<-0
}
View(logpmf)
pmf <- exp(logpmf)
View(pmf)
n <- 10
k <- matrix(0:n)
p <- 0.3
s <- 0.5
#problem 1 using the log transform
pmfFunc1 <- function(n,k,p,s) {
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
if (k[1] == 0){
logpmf[k==0]<-0
}
if (k[n+1] == n){
logpmf[k==n]<-0
}
expon <- exp(logpmf)
pmf <- apply(expon,2,sum)
return(pmf)
}
out <- pmfFunc1(n,k,p,s)
n <- 10
k <- matrix(0:n)
p <- 0.3
s <- 0.5
#problem 1 using the log transform
pmfFunc1 <- function(n,k,p,s) {
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
if (k[1] == 0){
logpmf[k==0]<-0
}
if (k[n+1] == n){
logpmf[k==n]<-0
}
expon <- exp(logpmf)
pmf <- apply(expon,2,sum)
return(pmf)
}
pmfFunc2 <- function(n,k,p,s) {
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
if (k[1] == 0){
logpmf[k==0]<-0
}
if (k[n+1] == n){
logpmf[k==n]<-0
}
expon <- exp(logpmf)
pmf <- sum(expon)
return(pmf)
}
benchmark(cpmf1 <- pmfFunc1(n,k,p,s),cpmf2 <- pmfFunc2(n,k,p,s), replications = 10)
n <- 10000
k <- matrix(0:n)
p <- 0.3
s <- 0.5
#problem 1 using the log transform
pmfFunc1 <- function(n,k,p,s) {
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
if (k[1] == 0){
logpmf[k==0]<-0
}
if (k[n+1] == n){
logpmf[k==n]<-0
}
expon <- exp(logpmf)
pmf <- apply(expon,2,sum)
return(pmf)
}
pmfFunc2 <- function(n,k,p,s) {
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
if (k[1] == 0){
logpmf[k==0]<-0
}
if (k[n+1] == n){
logpmf[k==n]<-0
}
expon <- exp(logpmf)
pmf <- sum(expon)
return(pmf)
}
#problem 1 fast way and without log transforming
# pmf <- ((k^k)*(n-k)^(n-k)/(n^n))*(((n^n)/((k^k)*(n-k)^(n-k)))^s)*(p^(k*s))*((1-p)^((n-k)*s))
# b) look at benchmark 2 using the 2 different methods
benchmark(cpmf1 <- pmfFunc1(n,k,p,s),cpmf2 <- pmfFunc2(n,k,p,s), replications = 10)
n <- 2000
k <- matrix(0:n)
p <- 0.3
s <- 0.5
#problem 1 using the log transform
pmfFunc1 <- function(n,k,p,s) {
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
if (k[1] == 0){
logpmf[k==0]<-0
}
if (k[n+1] == n){
logpmf[k==n]<-0
}
expon <- exp(logpmf)
pmf <- apply(expon,2,sum)
return(pmf)
}
pmfFunc2 <- function(n,k,p,s) {
logpmf <- lfactorial(n)-lfactorial(k)-lfactorial(n-k)+k*log(k)+(n-k)*log(n-k)-n*log(n)+n*s*log(n)-s*k*log(k)-s*(n-k)*log(n-k)+s*k*log(p)+(n-k)*s*log(1-p)
if (k[1] == 0){
logpmf[k==0]<-0
}
if (k[n+1] == n){
logpmf[k==n]<-0
}
expon <- exp(logpmf)
pmf <- sum(expon)
return(pmf)
}
#problem 1 fast way and without log transforming
# pmf <- ((k^k)*(n-k)^(n-k)/(n^n))*(((n^n)/((k^k)*(n-k)^(n-k)))^s)*(p^(k*s))*((1-p)^((n-k)*s))
# b) look at benchmark 2 using the 2 different methods
benchmark(cpmf1 <- pmfFunc1(n,k,p,s),cpmf2 <- pmfFunc2(n,k,p,s), replications = 100)
require(knitr)
require(markdown)
filen <- "Newcomer_PS3"
knit(paste0(filen,".Rmd"))
setwd("D:/Users/Michelle Newcomer/Documents/GitHub/Stat243PSets/PS3")
