earnings$edLevel <- cut(earnings$ed, breaks = c(0, 11, 12, 15, 16, 18, 99))
View(earnings)
levels(earnings$edLevel) <- c('no HS diploma', 'HS grad', 'some college',
'college grad', 'grad study', 'other')
boxplot(earn~edLevel, data = earnings)
out <- by(earnings, earnings$edLevel,
function(x) {
if(sum(!is.na(x$earn)))
lm(earn ~ height, data = x)
else NA
})
length(out)
summary(out[[5]])
ord <- order(earnings$earn, earnings$height, decreasing = TRUE)
ord[1:5]
(earnings$earn[ord])[c(1:5, 2025:2029)] # parentheses for clarity
earnings_ordered <- earnings[ord, ]
View(earnings_ordered)
View(earnings)
View(agg)
View(vote)
numToName <- data.frame(stateNum = 1:50,
stateName = row.names(state.x77))
View(numToName)
row.names(state.x77)
View(vote)
voteWithStateNames <- merge(vote, numToName, by.x = 'state',
by.y = 'stateNum', all.x = TRUE, all.y = FALSE)
View(voteWithStateNames)
stateInfo <- data.frame(state.x77)
View(stateInfo)
stateInfo$name <- row.names(stateInfo)
View(stateInfo)
by.x  = 'stateName', by.y = 'name', all.x = TRUE, all.y = FALSE)
# ACTUAL DEMONSTRATION
fullVote <- merge(voteWithStateNames, stateInfo[ ,
c('name', 'Population', 'Income', 'Illiteracy', 'Life.Exp')],
by.x  = 'stateName', by.y = 'name', all.x = TRUE, all.y = FALSE)
dim(vote)
View(fullVote)
dim(fullVote)
fullVote[1:2, ]
require(knitr)
require(markdown)
knit("module3_calc.Rmd")
knit("module3_calc.Rmd")
filen <- "module3_calc"
knit(paste0(filen,".Rmd"))
system(paste0("pandoc -s ", paste0(filen,".md"), " -t latex -o ", paste0(filen,".pdf"), "--highlight-style=tango -S"))
system(paste0("pandoc -s "), paste0(filen,".md"), " -t latex -o ", paste0(filen,".pdf"), "--highlight-style=tango -S"))
system(paste0("pandoc -s " paste0(filen,".md") " -t latex -o " paste0(filen,".pdf") "--highlight-style=tango -S"))
paste0("pandoc -s ", paste0(filen,".md"), " -t latex -o ", paste0(filen,".pdf"), "--highlight-style=tango -S")
system(paste0("pandoc -s ", paste0(filen,".md"), " -t latex -o ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
y <- matrix(sample(1:10, 12, replace= TRUE), nrow = 3, ncol = 4)
View(y)
outer(y)
outer(y,y)
y <- matrix(sample(1:10, 12, replace = TRUE), nrow = 3, ncol = 4)
yidot <- rowSums(y)
ydotj <- colSums(y)
e <- outer(yidot, ydotj) / sum(y)
sum( (y - e)^2 / e)
dim(results)
results <- by(earnings, list(earnings$sex, earnings$ed),
function(x) {
tmp <- sort(x$earn, decreasing = TRUE)
tmp[2]
}
)
dim(results)
results[1, ]
as.matrix(results)
attributes(results)
class(results) <- "matrix"
results
n <- 3000; x <- matrix(rnorm(n * n), nr = n)
system.time(out <- apply(x, 1, mean))
system.time(out <- rowMeans(x))
system.time(out <- sweep(x, 2, STATS = colMeans(x), FUN = "-"))
system.time(out2 <- t(t(x) - colMeans(x)))
identical(out, out2)
rmRows1 <- function(x){
omit <- FALSE
n <- ncol(x)
for(i in 1:n)
omit <- omit | is.na(x[ , i])
x[!omit,]
}
rmRows2 <- function(x){
sum.isna <- function(row){
return(sum(is.na(row)))
}
n.isna <- apply(x, 1, sum.isna)
return(x[!n.isna, ])
}
# this seems clever; does it improve things?
rmRows3 <- function(x){
return(x[!is.na(rowMeans(x)), ])
}
mat <- matrix(rnorm(500*500), 500)
benchmark(apply(mat, 1, sum),
mat %*% rep(1, ncol(mat)),
rowSums(mat),
replications = 10, columns=c('test', 'elapsed', 'replications'))
# how do I take successive differences of columns of a matrix quickly?
nc = 500
nr = 500
mat = matrix(rnorm(nr * nc), nr, nc)
system.time({A <- matrix(0, nr = nc, nc = nc - 1);
A[row(A) == col(A)] <- 1;
A[row(A) == col(A) + 1] <- -1;
res <- mat %*% A} )
View(A)
View(mat)
system.time({res <- matrix(NA, nr, nc -1);
for(j in 2:nc) res[ , j-1] = mat[ , j-1] - mat[ , j]})
system.time(res <- mat[ , -nc] - mat[ , -1])
mat[,-nc]
tmp <- mat[,-nc]
View(tmp)
View(mat)
tmp <- mat[,-1]
View(tmp)
tmp <- mat[,1]
tmp <- mat[,-1]
View(mat)
View(tmp)
system.time(res <- mat[ , -nc] - mat[ , -1])
n <- 5000
A <- matrix(rnorm(5000 * 5000), 5000)
B <- matrix(rnorm(5000 * 5000), 5000)
x <- rnorm(5000)
res <- A %*% B %*% x
n <- 1000
X <- matrix(rnorm(n^2), n)
View(X)
diagvals <- rnorm(n)
fix(diagvals)
fix(diagvals)
D = diag(diagvals)
View(D)
tmp <- diag(X)
fix(tmp)
diag(X) <- diag(X) + diagvals
View(X)
tmp <- diag(X)
fix(tmp)
diag(X) <- diag(X) + diagvals
tmp <- diagvals * X # instead of D %*% X
tmp2 <- t(t(X) * diagvals) # instead of X %*% D
vals <- rnorm(10)
names(vals) <- letters[1:10]
select <- c("h", "h", "a", "c")
vals[select]
n=1000000
x <- 1:n
xL <- as.list(x)
nms <- as.character(x)
names(x) <- nms
names(xL) <- nms
benchmark(x[500000], x["500000"], xL[[500000]], xL[["500000"]], replications = 10)
n=1000000
x <- 1:n
xL <- as.list(x)
nms <- as.character(x)
names(x) <- nms
names(xL) <- nms
fix(x)
benchmark(x[500000], x["500000"], xL[[500000]], xL[["500000"]], replications = 10)
xEnv <- as.environment(xL)  # convert from a named list
xEnv$"500000"
fix(xEnv)
xEnv[["500000"]]
benchmark(x[500000], xL[[500000]], xEnv[["500000"]], xEnv$"500000", replications = 10000)
y<-3*x
y<-3*a
a<-[]1:10
a<-[1:10]
a<-1:10
fix(a)
y<-3*a
fix(y)
n <- 10
k <- 1:n
f <- (k^k)(n-k)^(n-k)/(n^n)
pmf <- (k^k)(n-k)^(n-k)/(n^n)
n <- 10
k <- 1:n
p <- 0.3
sig <- 0.5
pmf <- (k^k)(n-k)^(n-k)/(n^n)
pmf <- (k^k)
fix(pmf)
pmf <- (k^k)*(n-k)^(n-k)/(n^n)
fix(pmf)
s <- 0.5
n <- 10
k <- 1:n
p <- 0.3
s <- 0.5
pmf <- [(k^k)*(n-k)^(n-k)/(n^n)]*[((n^n)/((k^k)*(n-k)^(n-k)))^s]*(p^(k*s))*[(1-p)^((n-k)*s]
pmf <- ((k^k)*(n-k)^(n-k)/(n^n))*(((n^n)/((k^k)*(n-k)^(n-k)))^s)*(p^(k*s))*((1-p)^((n-k)*s)
)
fix(pmf)
c_pmf <- sum(pmf)
c_pmf1 <- apply(pmf,1,sum)
fix(pmf)
k <- seq(1,1,10)
k <- seq(1,10,1)
fix(k)
pmf <- ((k^k)*(n-k)^(n-k)/(n^n))*(((n^n)/((k^k)*(n-k)^(n-k)))^s)*(p^(k*s))*((1-p)^((n-k)*s))
fix(pmf)
c_pmf1 <- apply(pmf,1,sum)
k <- as.vector(seq(1,10,1))
fix(k)
k <- as.vector(1:10)
fix(k)
pmf <- ((k^k)*(n-k)^(n-k)/(n^n))*(((n^n)/((k^k)*(n-k)^(n-k)))^s)*(p^(k*s))*((1-p)^((n-k)*s))
c_pmf1 <- apply(pmf,1,sum)
k <- 1:n
p <- 0.3
s <- 0.5
#problem 1 using apply
pmf <- ((k^k)*(n-k)^(n-k)/(n^n))*(((n^n)/((k^k)*(n-k)^(n-k)))^s)*(p^(k*s))*((1-p)^((n-k)*s))
c_pmf1 <- apply(as.vector(pmf),1,sum)
k <- matrix(1:n)
View(k)
p <- 0.3
s <- 0.5
#problem 1 using apply
pmf <- ((k^k)*(n-k)^(n-k)/(n^n))*(((n^n)/((k^k)*(n-k)^(n-k)))^s)*(p^(k*s))*((1-p)^((n-k)*s))
View(pmf)
c_pmf1 <- apply(pmf,1,sum)
fix(c_pmf1)
c_pmf1 <- apply(pmf,2,sum)
pmf <- ((k^k)*(n-k)^(n-k)/(n^n))*(((n^n)/((k^k)*(n-k)^(n-k)))^s)*(p^(k*s))*((1-p)^((n-k)*s))
c_pmf2 <- sum(pmf)
system.time(c_pmf1 <- apply(pmf,2,sum))
system.time(c_pmf2 <- sum(pmf))
benchmark(c_pmf1 <- apply(pmf,2,sum),c_pmf2 <- sum(pmf), replications = 10)
lnFunc <- function(n, k, p, s) {
lnn <- ln(n)
lnk <- ln(k)
lnp <- ln(p)
lns <- ln(s)
return(lnn)
return(lnk)
return(lnp)
return(lns)
}
lnFunc(n,k,p,s)
lnFunc <- function(n, k, p, s) {
lnn <- log(n)
lnk <- log(k)
lnp <- log(p)
lns <- log(s)
return(lnn)
return(lnk)
return(lnp)
return(lns)
}
lnFunc(n,k,p,s)
lnFunc <- function() {
lnn <- log(n)
lnk <- log(k)
lnp <- log(p)
lns <- log(s)
return(lnn)
return(lnk)
return(lnp)
return(lns)
}
lnFunc(n,k,p,s)
View(k)
lnFunc <- function(n,k,p,s) {
lnn <- log(n)
lnk <- log(k)
lnp <- log(p)
lns <- log(s)
return(lnn)
return(lnk)
return(lnp)
return(lns)
}
lnFunc(n,k,p,s)
(lnn,lnk,lnp,lns) <- lnFunc(n,k,p,s)
[lnn,lnk,lnp,lns] <- lnFunc(n,k,p,s)
lnFunc <- function(n,k,p,s) {
lnn <- log(n)
lnk <- log(k)
lnp <- log(p)
lns <- log(s)
tmp <- c(lnn,lnk,lnp,lns)
return(tmp)
}
out <- lnFunc(n,k,p,s)
fix(out)
n <- apply(n,log)
n <- log(n)
k <- log(k)
p <- log(p)
s <- log(s)
a <- (k^k)*(n-k)^(n-k)
b <- (n^n)
c <- p^(k*s)
d <- (1-p)
e <- (n-k)
pmf <- (a/b)*((b/a)^s)*(c)*(d^(e*s))
View(pmf)
View(a)
View(c)
View(e)
View(k)
n <- 10
k <- matrix(1:n)
p <- 0.3
s <- 0.5
n <- 10
k <- matrix(1:n)
p <- 0.3
s <- 0.5
?Special
k <- 0:10 # 10 is sufficient for ~ 9 digit precision:
sqrt(1.25)
sum(choose(1/2, k)* .25^k)
choose(1/2,k)
choose(1/2,k)*
.25
library(compiler); library(rbenchmark)
f <- function(x){
for(i in 1:length(x)) x[i] <- x[i] + 1
return(x)
}
f(3)
x[1]
f(5)
fc <- cmpfun(f)
fc # notice the indication that the function is byte compiled.
x <- rnorm(100000)
benchmark(f(x), fc(x), x <- x + 1, replications = 5)
x <- rnorm(10)
f <- function(input){
data <- input
g <- function(param) return(param * data)
return(g)
}
myFun <- f(x)
rm(x) # to demonstrate we no longer need x
myFun(3)
x <- rnorm(1e7)
myFun <- f(x)
object.size(myFun) # hmmm
object.size(environment(myFun)$data)
make_container <- function(n) {
x <- numeric(n)
i <- 1
function(value = NULL) {
if (is.null(value)) {
return(x)
} else {
x[i] <<- value
i <<- i + 1
}
}
}
nboot <- 100
bootmeans <- make_container(nboot)
data <- faithful[ , 1] # length of Old Faithful geyser eruption times
fix(data)
for (i in 1:nboot)
bootmeans(mean(sample(data, length(data),
replace=TRUE)))
bootmeans()
RGFlux<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\Rain_Garden_Transient_Precipitation_K_Cumulative_Constant_Boundary_Flux.txt")
head(RGFlux)
tail(RGFlux)
names(RGFlux)=c("Index","Time","FluxVolume")
attach(RGFlux)
RGFlux$FluxVolume<-RGFlux$FluxVolume/28.27
GLFlux<-read.table("G:\\Michelle HP Laptop 8-27-12\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\GLTransientCumFlux.txt")
GLFlux<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\GLTransientCumFlux.txt")
head(GLFlux)
tail(GLFlux)
names(GLFlux)=c("Index","Time","FluxVolume")
attach(GLFlux)
GLFlux$FluxVolume<-GLFlux$FluxVolume/11.97-8.53
plot(c(RGFlux$FluxVolume),c(RGFlux$Time),type="n",xlab="Time (Hour)",ylab="Cumulative Flux (m)",cex.lab=0.9,cex.axis=0.9,main="Total Flux at the bottom of the model domain \n Year 2011-2012",xlim=c(0,4342),ylim=c(0,2.8))
points(RGFlux$Time,RGFlux$FluxVolume,pch=20,col=1)
points(GLFlux$Time,GLFlux$FluxVolume,pch=20,col=2)
legend(locator(1),c("Infiltration Trench Flux","Irrigated Grass Lawn Flux"),col=c(1,2),lty=c(1,1),bty="n")
RGFlux$FluxVolume<-RGFlux$FluxVolume/28.27
View(RGFlux)
RGFlux<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\Rain_Garden_Transient_Precipitation_K_Cumulative_Constant_Boundary_Flux.txt")
head(RGFlux)
tail(RGFlux)
names(RGFlux)=c("Index","Time","FluxVolume")
attach(RGFlux)
RGFlux$FluxVolume<-RGFlux$FluxVolume/28.27
View(RGFlux)
tail(RGFlux)
GLFlux<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\GLTransientCumFlux.txt")
head(GLFlux)
tail(GLFlux)
names(GLFlux)=c("Index","Time","FluxVolume")
attach(GLFlux)
GLFlux$FluxVolume<-GLFlux$FluxVolume/11.97-8.53
tail(GLFlux)
GLFlux2<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\Grass_Lawn_Transient_Predicted_Precipitation_C_Cum_Free_Deep_Drainage_Boundary_Flux.txt")
head(GLFlux)
head(GLFlux2)
tail(GLFlux2)
names(GLFlux2)=c("Index","Time","FluxVolume")
attach(GLFlux)
attach(GLFlux2)
GLFlux2$FluxVolume<-GLFlux2$FluxVolume/11.97-8.53
tail(GLFlux2)
tail(GLFlux)
tail(RGFlux)
GLFlux<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\GLTransientCumFlux.txt")
head(GLFlux)
tail(GLFlux)
names(GLFlux)=c("Index","Time","FluxVolume")
attach(GLFlux)
GLFlux$FluxVolume<-GLFlux$FluxVolume/11.97-8.52
tail(GLFlux)
GLFlux<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\GLTransientCumFlux.txt")
head(GLFlux)
tail(GLFlux)
names(GLFlux)=c("Index","Time","FluxVolume")
attach(GLFlux)
GLFlux$FluxVolume<-GLFlux$FluxVolume/11.97-8.51 #or 8.53 originally?
tail(GLFlux)
GLFlux<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\GLTransientCumFlux.txt")
head(GLFlux)
tail(GLFlux)
names(GLFlux)=c("Index","Time","FluxVolume")
attach(GLFlux)
GLFlux$FluxVolume<-GLFlux$FluxVolume/11.97-8.49
tail(GLFlux)
legend(locator(1),c("Infiltration Trench Flux","Irrigated Grass Lawn Flux"),col=c(1,2),lty=c(1,1),bty="n")
GLFlux2<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\Grass_Lawn_Transient_Predicted_Precipitation_C_Cum_Free_Deep_Drainage_Boundary_Flux.txt")
head(GLFlux2)
tail(GLFlux2)
names(GLFlux2)=c("Index","Time","FluxVolume")
attach(GLFlux2)
GLFlux2$FluxVolume<-GLFlux2$FluxVolume/11.97-8.53
tail(GLFlux2)
GLFlux<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\GLTransientCumFlux.txt")
head(GLFlux)
tail(GLFlux)
names(GLFlux)=c("Index","Time","FluxVolume")
attach(GLFlux)
GLFlux$FluxVolume<-GLFlux$FluxVolume/11.97-8.49 #or 8.53 originally?
View(GLFlux)
GLFlux2<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\Grass_Lawn_Transient_Predicted_Precipitation_C_Cum_Free_Deep_Drainage_Boundary_Flux.txt")
head(GLFlux2)
tail(GLFlux2)
names(GLFlux2)=c("Index","Time","FluxVolume")
attach(GLFlux2)
GLFlux2$FluxVolume<-GLFlux2$FluxVolume/11.97
View(GLFlux2)
tail(GLFlux2)
GLGlux2(4174)
GLGlux2[4174]
GLFlux2[4174]
GLFlux2(4174)
head(GLFlux2)
GLFlux2(4174)
GLFlux2[4174,3]
GLFlux2[4174,4]
GLFlux2<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\Grass_Lawn_Transient_Predicted_Precipitation_C_Cum_Free_Deep_Drainage_Boundary_Flux.txt")
head(GLFlux2)
tail(GLFlux2)
names(GLFlux2)=c("Index","Time","FluxVolume")
attach(GLFlux2)
GLFlux2$FluxVolume<-GLFlux2$FluxVolume/11.97-6.4
tail(GLFlux2)
GLFlux2<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\Grass_Lawn_Transient_Predicted_Precipitation_C_Cum_Free_Deep_Drainage_Boundary_Flux.txt")
head(GLFlux2)
tail(GLFlux2)
names(GLFlux2)=c("Index","Time","FluxVolume")
attach(GLFlux2)
GLFlux2$FluxVolume<-GLFlux2$FluxVolume/11.97-8.53
tail(GLFlux2)
GLFlux2<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\Grass_Lawn_Transient_Predicted_Precipitation_C_Cum_Free_Deep_Drainage_Boundary_Flux.txt")
head(GLFlux2)
tail(GLFlux2)
names(GLFlux2)=c("Index","Time","FluxVolume")
attach(GLFlux2)
GLFlux2$FluxVolume<-GLFlux2$FluxVolume/11.97-7
tail(GLFlux2)
GLFlux2<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\Grass_Lawn_Transient_Predicted_Precipitation_C_Cum_Free_Deep_Drainage_Boundary_Flux.txt")
head(GLFlux2)
tail(GLFlux2)
names(GLFlux2)=c("Index","Time","FluxVolume")
attach(GLFlux2)
GLFlux2$FluxVolume<-GLFlux2$FluxVolume/11.97-8
tail(GLFlux2)
GLFlux2<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\Grass_Lawn_Transient_Predicted_Precipitation_C_Cum_Free_Deep_Drainage_Boundary_Flux.txt")
head(GLFlux2)
tail(GLFlux2)
names(GLFlux2)=c("Index","Time","FluxVolume")
attach(GLFlux2)
GLFlux2$FluxVolume<-GLFlux2$FluxVolume/11.97-8.49
tail(GLFlux2)
GLFlux2<-read.table("G:\\Michelle HP Laptop 8-27-12\\Michelle Newcomer\\Documents\\SFSU\\Thesis\\Data\\Hydrus Output Observation Node data\\Boundary Flux\\Grass_Lawn_Transient_Predicted_Precipitation_C_Cum_Free_Deep_Drainage_Boundary_Flux.txt")
head(GLFlux2)
tail(GLFlux2)
names(GLFlux2)=c("Index","Time","FluxVolume")
attach(GLFlux2)
GLFlux2$FluxVolume<-GLFlux2$FluxVolume/11.97-8.2
tail(GLFlux2)
