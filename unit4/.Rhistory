qs
qs[1] + 3
names(qs) <- NULL
qs
row.names(mtcars)[1:6]
names(mtcars)
mat <- data.frame(x = 1:2, y = 3:4)
View(mat)
row.names(mat) <- c("first", "second")
mat
vec <- c(first = 7, second = 1, third = 5)
vec
fix(vec)
vec['first']
identical(ls(), objects()) # synonymous
dat <- 7; dat2 <- 9; subdat <- 3; obj <- 5; obj2 <- 7
objects(pattern = "^dat")
rm(dat2, subdat)
rm(list = c("obj", "obj2"))
rm(list = ls(pattern = "^dat"))
exists('dat') # can be helpful when programming
dat <- rnorm(500000)
object.size(dat)
print(object.size(dat), units = "Mb") # this seems pretty clunky!
rm(list = ls()) # what does this do?
rnorm(10)
x <- 1e5
log10(x)
y <- 100000
x <- 1e-8
?lm
help.search('lm')
apropos('lm')
help('[[')
ch1 <- "Chris's\n"
ch2 <- 'He said, "hello."\n'
ch3 <- "He said, \"hello.\"\n"
ch1
ch3
x <- list(a = 1:2, b = 3:4, sam = rnorm(4))
fix(x)
x[[2]] # extracts the indicated component, which can be anything,
fix(x)
# will also be a list
x[c(1, 3)] # extracts subvectors, which since it is a list,
fix(x)
lapply(x, length)
fix(x)
sapply(x, length) # returns things in a user-friendly way
apply(CO2, 2, class) # hmmm
sapply(CO2, class)
params <- list( a = list(mn = 7, sd = 3), b = list(mn = 6, sd =1), c = list(mn = 2, sd = 1))
fix(params)
sapply(params, '[[', 1)
unlist(x)
sapply(params, '[[', 2)
sapply(params, '[[', 1)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, list(mtcars$cyl, mtcars$gear), mean)
aggregate(mtcars, by = list(cyl = mtcars$cyl), mean)
by(warpbreaks, warpbreaks$tension, function(x) {lm(breaks ~ wool, data = x)})
splt <- split(mtcars, mtcars$cyl)
fix(splt)
fix(splt)
x <- rnorm(100)
fix(x)
f <-  cut(x, breaks = c(-Inf, -1, 1, Inf), labels = c('low', 'medium', 'high'))
fix(f)
levels(f) # note that f is not explicitly ordered
f <- relevel(f, 'high') # puts high as first level
f <-  cut(x, breaks = c(-Inf, -1, 1, Inf), labels = c('low', 'medium', 'high'), ordered_result = TRUE)
fix(f)
f
myList <- list(a = 1:3, b = 11:13, c = 21:23)
fix(myList)
args(rbind)
rbind(myList$a, myList$b, myList$c)
rbind(myList)
do.call(rbind, myList)
mat <- matrix(rnorm(500), nr = 50)
mat <- matrix(rnorm(500), nr = 50)
View(mat)
identical(mat[1:50], mat[ , 1])
identical(mat[1:10], mat[1, ])
vec <- c(mat)
fix(vec)
mat2 <- matrix(vec, nr = 50)
identical(mat,mat2)
View(mat2)
identical(mat,mat2)
identical(mat[1:50], mat2[ , 1])
matrix(1:4, 2, byrow = TRUE)
x <- c(1, 10, 2, 9, 3, 8)
fix(x)
which(x < 3)
x <- matrix(1:6, nrow = 2)
View(x)
which(x < 3, arr.ind = TRUE)
set <- c("Mazda RX4", "Merc 240D", "Fiat 128")
row.names(mtcars) %in% set
which(row.names(mtcars) %in% set)
match(row.names(mtcars), set)
set.seed(0)
vec <- rnorm(8); mat <- matrix(rnorm(9), 3)
fix(vec)
View(mat)
vec; mat
vec[vec < 0]
vec[vec < 0] <- 0
vec
mat[mat[ , 1] < 0, ] # similarly for data frames
mat[ , 1] < 0
mat[ , ] < 0
mat[mat[ , ] < 0, ] # similarly for data frames
mat[mat[ , 1] < 0, 2:3]  # similarly for data frames
mat[ , mat[1, ] < 0]
mat[ , mat[1, ] < 0]
mat[mat[ , 1] < 0, 2:3] <- 0
View(mat)
set.seed(0) # so we get the same vec as we had before
vec <- rnorm(8)
wh <- which(vec < 0)
fix(wh)
logicals <- vec < 0
logicals; wh
identical(vec[wh], vec[logicals])
vec <- c(1L, 2L, 1L)
fix(vec)
is.integer(vec)
vec[vec == 1L] # in general, not safe with numeric vectors
vec[vec != 3L] # nor this
fix(vec)
fix(vec)
is.integer(vec)
vec[vec == 1L] # in general, not safe with numeric vectors
vec[vec != 3L] # nor this
mat <- matrix(rnorm(25), 5)
View(mat)
rowInd <- c(1, 3, 5); colInd <- c(1, 1, 4)
fix(colInd)
mat[cbind(rowInd, colInd)]
students <- factor(c("basic", "proficient", "advanced", "basic", "advanced", "minimal"))
fix(students)
score = c(minimal = 3, basic = 1, advanced = 13, proficient = 7)
score["advanced"]
score[students[3]]
score[as.character(students[3])]
x <- matrix(1:6, nr = 2)
x
apply(x, 1, min) # by row
apply(x, 2, min) # by column
x <- array(1:24, c(2, 3, 4))
fix(x)
x
apply(x, 2, min) # for(j in 1:3) print(min(x[ , j, ]))
apply(x, c(2, 3), min)
n <- 500000; nr <- 10000; nCalcs <- n/nr
mat <- matrix(rnorm(n), nrow = nr)
View(mat)
times <- 1:nr
system.time(out1 <- apply(mat, 2, function(vec) {mod = lm(vec ~ times); return(mod$coef[2])}))
system.time({out2 = rep(NA, nCalcs); for(i in 1:nCalcs){out2[i] = lm(mat[ , i] ~ times)$coef[2]}})
load('prec.RData')
View(prec)
prec <- prec[1:1000, ] # just to make the example code run faster
precVars <- 5:ncol(prec)
fix(precVars)
precVars <- 5:ncol(prec)
precStacked <- stack(prec, select = precVars)
View(precStacked)
out <- unstack(precStacked)
View(out)
prec <- cbind(unique = 1:nrow(prec), prec)
View(prec)
precVars <- precVars + 1
fix(precVars)
precLong <- reshape(prec, varying = names(prec)[precVars], idvar = 'unique', direction = 'long', sep = '')
View(precLong)
View(precStacked)
View(precLong)
precLong <- precLong[!is.na(precLong$prec), ]
View(precLong)
View(precLong)
precWide <- reshape(precLong, v.names = 'prec', idvar = 'unique', direction = 'wide', sep='')
View(precWide)
melt()
help melt
library(help=reshape2)
library(help=reshape2)
X <- matrix(rnorm(9), 3)
View(X)
X
X[col(X) >= row(X)]
diag(X)
diag(X) <- 1
X
d <- diag(c(rep(1, 2), rep(2, 2)))
View(d)
d
X %*% Y # matrix multiplication
Y <- matrix(rnorm(4), 1)
View(Y)
Y <- matrix(rnorm(4), 4)
View(Y)
X %*% Y # matrix multiplication
Y <- matrix(rnorm(3), 3)
X %*% Y # matrix multiplication
View(X)
View(Y)
X * Y # direct product
x %o% y # outer product of vectors x, y: x times t(y)
outer(x, y) # same thing
outer(x, y, function(x, y) cos(y)/(1 + x^2))
X %o% Y # outer product of vectors x, y: x times t(y)
outer(X, Y) # same thing
crossprod(X, Y) # same as but faster than t(X) %*% Y!
solve(X) # inverse of X
solve(X, y) # (inverse of X) %*% y
solve(X, Y) # (inverse of X) %*% y
args(lm)
pplot <- function(x, y, pch = 16, cex = 0.4, ...) {
plot(x, y, pch = pch, cex = cex, ...)
}
myFun <- function(...){
print(..2)
args <- list(...)
print(args[[2]])
}
myFun(1,3,5,7)
args(dgamma)
text<-c("J@hon","Johnefis","j@sadsda")grep("^[[:upper:]@]",text)
[1] 1 2
text<-c("J@hon","Johnefis","j@sadsda")
grep("^[[:upper:]@]",text)
fix(text)
text<-c("J@hon","Johnefis","j@sadsda")
grep("^[[:upper:]]@",text)
text<-c("Cat","cat","at","that","ttt","car")
text<-c("Cat","cat","at","that","ttt","car","concatenate")
text<-c("J@hon","Johnefis","j@sadsda")
grep("^[[:alpha:]]",text)
text<-c("Cat","cat","at","that","ttt","car","concatenate")
grep("[[:alpha:]]",text)
grep("[[:alpha:]]cat",text)
grep("cat|at|t",text)
text<-c("Cat","cat","at","that","ttt","car","concatenate","t")
vars <- c("date98", "size98", "x98weights98", "sdfsd")
grep("98", vars)
gregexpr("98", vars)
fix(vars)
addresses <- c("john@att.com", "stat243@bspace.berkeley.edu", "john_smith@att.com")
grep("[[:digit:]_]", addresses, perl = TRUE)
text<-c("Cat","cat","at","that","ttt","car","concatenate","t")
grep("cat|at|t",text)
grep("^cat$", text, perl = TRUE)
grep("^cat$|^at$", text, perl = TRUE)
grep("^cat$|^at$|^t$", text, perl = TRUE)
text<-c("Cat","cat","at","that","ttt","car","concatenate","t")
grep("^cat$|^at$|^t$", text, perl = TRUE)
text<-c("Cat","Caat","cat","caat","caaaat","at","that","ttt","car","concatenate","t")
grep("^ct$", text, perl = TRUE)
grep("^c_t$", text, perl = TRUE)
fix(text)
grep("^c_[[:alpha:]]_t$", text, perl = TRUE)
grep("^c", text, perl = TRUE)
grep("^c_t$", text, perl = TRUE)
grep("^c+t$", text, perl = TRUE)
grep("^c_", text, perl = TRUE)
grep("^[c]-", text, perl = TRUE)
grep("^[c]", text, perl = TRUE)
text<-c("Cat","Caat","cat","caat","caaaat","at","that","ttt","car","concatenate","t")
grep("^[c][[:alpha:]]", text, perl = TRUE)
grep("^[c][[:alpha:]][t]$", text, perl = TRUE)
grep("^[c]_[[:alpha:]]_[t]$", text, perl = TRUE)
grep("^[c][[:alpha:]]*[t]$", text, perl = TRUE)
text<-c("Cat","Caat","cat","caat","caaaat","at","that","ttt","car","concatenate","t")
grep("^[c][[:alpha:]]*[t]$", text, perl = TRUE)
text<-c("Dog","DOG","dog","dag","dOG","fog")
grep("^c[[:alpha:]]*g$", text, perl = TRUE)
grep("^d[[:alpha:]]*g$", text, perl = TRUE)
grep("^dog$", text, perl = TRUE)
grep("^dog$", text, perl = TRUE,ignore.case=TRUE)
text<-c("Dog","DOG","dog","dag","dOG","fog")
grep("^dog$", text, perl = TRUE,ignore.case=TRUE)
text<-c("D1g","123.4","12","d1g.2","d1g.2b")
text<-c("D1g","123.4","12","d1g.2","d1g.2b","-3.5","-5")
text<-c("123.4","12","-3.5","-5")
grep("[[:digit:]]*.*$",text)
grep("[^-][[:digit:]]*.*$",text)
grep("[\\-][[:digit:]]*.*$",text)
grep("[\-][[:digit:]]*.*$",text)
grep("[^\\-][[:digit:]]*.*$",text)
grep("[\\[^-][[:digit:]]*.*$",text)
grep("[//[^-][[:digit:]]*.*$",text)
grep("[/[^-][[:digit:]]*.*$",text)
grep("[[^-][[:digit:]]*.*$",text)
grep("[^[^-][[:digit:]]*.*$",text)
grep("\\[[^-][[:digit:]]*.*$",text)
grep("[\\[^-][[:digit:]]*.*$",text)
text<-c("123.4","12","-3.5","-5")
grep("[\\[^-][[:digit:]]*.*$",text)
grep("[![^-][[:digit:]]*.*$",text)
grep("[[^-][[:digit:]]*.*$",text)
text<-c("123.4","12","-3.5","-5")
grep("[[!^-][[:digit:]]*.*$",text)
grep("[[:digit:]]*.*$",text)
grep("^[[:digit:]]*.*$",text)
text<-c("123.4","12","-3.5","-5")
grep("[[!^-][[:digit:]]*.*$",text)
grep("[[!^-][[:digit:]]*.*$",text) --invert
grep("[[!^-][[:digit:]]*.*$",text) --invert-match
text<-c("123.4","12","-3.5","-5")
grep(-v,"[[!^-][[:digit:]]*.*$",text)
grep("[[!^-][[:digit:]]*.*$",text,invert=TRUE)
text<-c("123.4","12","-3.5","-5")
grep("[[!^-][[:digit:]]*.*$",text,invert=TRUE)
text<-c("Jane Doe","Jane      Doe","  Jane  Doe  ")
grep("^[[:alpha:]]*[[:alpha:]]$", text, perl = TRUE)
grep("^[[:alpha:]][[:alpha:]]$", text, perl = TRUE)
grep("^[[:alpha:]]+[[:alpha:]]$", text, perl = TRUE)
grep("^[[:alpha:]]*[[:alpha:]]$", text, perl = TRUE)
fix(text)
grep("^[[:alpha:]]_[[:alpha:]]$", text, perl = TRUE)
grep("^[[:alpha:]]", text, perl = TRUE)
text<-c("Jane Doe","Jane      Doe","  Jane  Doe  ","Jane   Doe ")
grep("^[[:alpha:]]", text, perl = TRUE)
grep("^[[:alpha:]]*[[:alpha:]]$", text, perl = TRUE)
text<-c("Jane Doe","Jane      Doe","  Jane  Doe  ","Jane   Doe ")
grep("^[[:alpha:]]*[[:alpha:]]$", text, perl = TRUE)
grep("^[[:alpha:]]* *[[:alpha:]]$", text, perl = TRUE)
grep("^[[:alpha:]] [[:alpha:]]$", text, perl = TRUE)
grep("^[[:alpha:]]+ +[[:alpha:]]$", text, perl = TRUE)
save.image("D:/Users/Michelle Newcomer/Documents/GitHub/LecturePractice/unit4/unit3.RData")
args(lm)
pplot <- function(x, y, pch = 16, cex = 0.4, ...) {
myFun <- function(...){
print(..2)
args <- list(...)
print(args[[2]])
}
myFun(1,3,5,7)
)
myFun <- function(...){print(..2) args <- list(...) print(args[[2]])}
args(dgamma)
tmpf = function(x, shape, rate = 1, scale = 1/rate, log = FALSE){
print(shape)
print(rate)
print(scale)
}
tmpf(1, 2, rate = 3)
tmpf(1, 2, scale = 5)
dgamma(1, 2, scale = 5)
# does it matter that the rate and scale are inconsistent?
dgamma
}
myFun <- function(...) {
print(..2)
args <- list(...)
print(args[[2]])
}
myFun(1, 3, 5, 7)
mat <- matrix(1:9, 3)
View(mat)
apply(mat, 2, function(vec) vec - vec[1])
View(mat)
apply(mat, 1, function(vec) vec - vec[1])
f <- function(x, y = 2, z = 3 / y) { x + y + z }
args(f)
formals(f)
class(formals(f))
match.call(mean, quote(mean(y, na.rm = TRUE)))
f <- function(x) { res <- x^2}
f(3)
a <- f(3)
a
f <- function(x) {x^2}
f(3)
f <- function(x) {res <- x^2}
res
f(3)
f <- function(x) {res <- x^2}
f(3)
res
a <- f(3)
a
f <- function(x){ invisible(x^2) }
f(3)
a <- f(3)
a
mod <- lm(mpg ~ cyl, data = mtcars)
class(mod)
is.list(mod)
mod
x <- 3
f <- function() {x <- x^2; print(x)}
f(x)
x # what do you expect?
x <- 3
f <- function(x) {x <- x^2; print(x)}
f(x)
x # what do you expect?
x <- 3
f <- function() {x <- x^2; print(x)}
f()
x # what do you expect?
f <- function() {assign('x', x^2, env = .GlobalEnv)}
# careful, this could be dangerous as a variable is changed as a side effect
x <- 3
f <- function() {
f2 <- function() { print(x) }
f2()
}
f() # what will happen?
f <- function() {assign('x', x^2, env = .GlobalEnv)}
f(3)
f()
x <- 3
f()
x <- 3
f <- function() {
f2 <- function() { print(x) }
f2()
}
f() # what will happen?
f <- function() {
f2 <- function() { print(x) }
x <- 7
f2()
}
f() # what will happen?
f2 <- function() print(x)
f <- function() {
x <- 7
f2()
}
f() # what will happen?
y <- 100
f <- function(){
y <- 10
g <- function(x) x + y
return(g)
}
# you can think of f() as a function constructor
h <- f()
h(3)
y <- 100
f <- function(){
y <- 10
print(sys.frame(sys.nframe()))
g <- function(x) x + y
return(g)
}
# you can think of f() as a function constructor
h <- f()
h <- f()
h
h(3)
assign("y", 5, envir = environment(h))
h(3)
environment(h)$y <- 1
h(3)
z <- 3
x <- 100
f <- function(x, y = x*3) {x+y}
f(z*5)
### 5.4 Environments and the search path
search()
searchpaths()
x <- .GlobalEnv
fix(x)
parent.env(x)
while (environmentName(x) != environmentName(emptyenv())) {
print(environmentName(parent.env(x)))
x <- parent.env(x)
}
ls(pos = 7)[1:5] # what does this do?
ls("package:stats")[1:5]
ls("package:methods")[1:5]
ls("package:datasets")[1:5]
ls(pos = 7)[1:5] # what does this do?
search()
searchpaths()
environment(lm)
x <- environment(lm)
parent.env(x)
while (environmentName(x) != environmentName(emptyenv())) {
print(environmentName(parent.env(x)))
x <- parent.env(x)
}
system("RMDFILE=Newcomer_PS2")
markdownToHTML('$RMDFILE.md', '$RMDFILE.html', options=c(\"use_xhml\"))'")
system("pandoc -s Newcomer_PS2.html -o Newcomer_PS2.pdf") this command inbetween the quotes needs to be run in the command prompt.
system("pandoc -s Newcomer_PS2.html -o Newcomer_PS2.pdf") #this command inbetween the quotes needs to be run in the command prompt.
system("pandoc -s Newcomer_PS2.html -o Newcomer_PS2.pdf") #this command inbetween the quotes needs to be run in the command prompt.
setwd("D:/Users/Michelle Newcomer/Documents/GitHub/Stat243PSets/PS2")
system("pandoc -s Newcomer_PS2.html -o Newcomer_PS2.pdf") #this command inbetween the quotes needs to be run in the command prompt.
setwd("D:/Users/Michelle Newcomer/Documents/GitHub/Stat243PSets/PS2")
# Create .md and .pdf files
filen <- "test"
knit(paste0(filen,".md"))
require(knitr)
require(markdown)
knit(paste0(filen,".md"))
filen <- "Newcomer_PS2"
knit(paste0(filen,".md"))
system(paste0("pandoc -s ", paste0(filen,"-out.md"), " -t latex -o ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s ", paste0(filen,"-out.md"), " -t latex -o ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s ", paste0(filen,".md"), " -t latex -o ", paste0(filen,".pdf"), "--highlight-style=tango -S"))
system("pandoc -s Newcomer_PS2.md -t latex -o Newcomer_PS2.pdf --highlight-style=tango -S")
system("pandoc -s Newcomer_PS2.md -t latex -o Newcomer_PS2.pdf --highlight-style=pygments -S")
system("pandoc -s Newcomer_PS2.html -o Newcomer_PS2.pdf --highlight-style=tango -S") #this command inbetween the quotes needs to be run in the command prompt.
system("pandoc -s Newcomer_PS2.md -o Newcomer_PS2.pdf --highlight-style=tango -S") #this command inbetween the quotes needs to be run in the command prompt.
